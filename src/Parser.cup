import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

  public boolean syntaxErrors;  
     public void syntax_error(Symbol current_token) {  
         report_error(
             "Syntax error at line " + (current_token.left+1) + ", column "
     + current_token.right, null
         );
     }

:};

// Do something with ILLEGAL_CHARARCTER or drop it.
terminal INTEGER, IDENTIFIER, LET, EQUAL, SEMICOL, PLUS, MINUS, MULT, DIV;
terminal LPAREN, RPAREN, LSQ_BRACK, RSQ_BRACK, PERIOD_SYM, UNDERSCORE, DEUX_POINTS, LEN;
terminal BADCHAR;
terminal MAIN;
terminal L_CBRACK, R_CBRACK, COMMA, INF, SUP, TOP;

terminal PRINT, STRING_LITERAL, CHAR, STRING, BOOL_TYPE, CHAR_TYPE, INT_TYPE, RAT_TYPE, FLOAT_TYPE, DICTIONARY, SEQUENCE;
terminal TRUE, FALSE;

nonterminal main, print;  /* principal nonterminal declarations */
nonterminal test;

nonterminal int_number, float_number, rat_number, number, length_of_listObj;
nonterminal tf;
nonterminal dict_type, dict_content, dict_value, seq_value, seq_content, dict_obj;
nonterminal seq_type;
nonterminal statements, statement, top_level;
nonterminal let_bind, full_exp, simple_exp, operator;
nonterminal prim_data_type;
nonterminal all_types, all_values;

precedence left PLUS, MINUS;
precedence left DIV, MULT;

test ::= all_values
       | all_types ;

main ::= MAIN L_CBRACK statements R_CBRACK SEMICOL ;

prim_data_type ::= INTEGER:i {: RESULT = new Node("int"); :}
                   | BOOL_TYPE:b {: RESULT = new Node("bool"); :}
                   | CHAR_TYPE:c {: RESULT = new Node("char"); :}
                   | FLOAT_TYPE:f {: RESULT = new Node("float"); :}
                   | RAT_TYPE:r {: RESULT = new Node("rat"); :}
                   ;


top_level ::= statements:ss {:
                if(debug()) System.out.println((Node)ss);
              :}
            ;

statements ::= statements:ss statement:s {:
                  Node n = (Node)ss;
                  n.addChild((Node)s);
                  RESULT = n;
               :}
             | /* empty */ {:
                  RESULT = new Node("Statements");
               :}
             ;

statement ::= let_bind:s {:
                RESULT = (Node)s;
              :}
            | full_exp:s {:
                RESULT = (Node)s;
              :}
            ;

full_exp ::= simple_exp:e SEMICOL {: RESULT = (Node)e; :};

simple_exp ::= INTEGER:i    {: RESULT = new Node(i); :}
             | IDENTIFIER:i {: RESULT = new Node(i); :}
             | simple_exp:e1 operator:o simple_exp:e2 {:
                  Node n = (Node)o;
                  n.addChild((Node)e1);
                  n.addChild((Node)e2);
                  RESULT = n;
               :}
             | LPAREN simple_exp:e RPAREN {:
                 Node n = new Node("parens");
                 n.addChild(new Node("("));
                 n.addChild((Node)e);
                 n.addChild(new Node(")"));
                 RESULT = (Node)e;
               :}
             | STRING_LITERAL:i {: RESULT = new Node(i); :}
             ;

operator ::= PLUS  {: RESULT = new Node("+"); :}
           | MINUS {: RESULT = new Node("-"); :}
           | MULT  {: RESULT = new Node("*"); :}
           | DIV   {: RESULT = new Node("/"); :}
           ;

let_bind ::= LET IDENTIFIER:i EQUAL full_exp:e {:
               Node n = new Node("LET");
               n.addChild(new Node(i));
               n.addChild((Node)e);
               RESULT = n;
             :};

number ::= INTEGER
        | number UNDERSCORE INTEGER;

int_number ::= number
           | MINUS number;
//           | length_of_listObj;

rat_number ::= int_number DIV number;

float_number ::= int_number PERIOD_SYM number;

all_types ::=  BOOL_TYPE
          | CHAR_TYPE
          | INT_TYPE
          | RAT_TYPE
          | FLOAT_TYPE
          | dict_type
          | seq_type;

tf ::= TRUE
   | FALSE;

all_values ::= CHAR
           | int_number
           | rat_number
           | float_number
           | tf
           | dict_value
           | seq_value
           | STRING
           | length_of_listObj;
//           | IDENTIFIER;


dict_type ::= DICTIONARY INF all_types COMMA all_types SUP
          | DICTIONARY INF TOP COMMA all_types SUP
          | DICTIONARY INF all_types COMMA TOP SUP
          | DICTIONARY INF TOP COMMA TOP SUP;

dict_value ::= L_CBRACK dict_content R_CBRACK;

dict_content ::= dict_obj
             | dict_obj COMMA dict_content
             | ;

dict_obj ::= all_values DEUX_POINTS all_values;


seq_type ::= SEQUENCE INF all_types SUP
         | SEQUENCE INF TOP SUP;

seq_value ::= LSQ_BRACK seq_content RSQ_BRACK;

seq_content ::= all_values
            | all_values COMMA seq_content
            | ;


length_of_listObj ::= IDENTIFIER PERIOD_SYM LEN ;

// TODO: add index declaration in lexer as "index", INDEX terminal and define s[index] grammar

//index
//index ::= IDENTIFIER LAGRA int_number RAGRA;
////slice
//slice ::= IDENTIFIER LAGRA number COLON int_number RAGRA
//        | IDENTIFIER LAGRA COLON int_number RAGRA
//        | IDENTIFIER LAGRA number COLON RAGRA;


expression_list ::=




